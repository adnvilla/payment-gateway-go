// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"

	usecase "github.com/adnvilla/payment-gateway-go/src/bounded_context/payment_service/application/usecase"
	mock "github.com/stretchr/testify/mock"
)

// MockCreateRefundUseCase is an autogenerated mock type for the CreateRefundUseCase type
type MockCreateRefundUseCase struct {
	mock.Mock
}

type MockCreateRefundUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreateRefundUseCase) EXPECT() *MockCreateRefundUseCase_Expecter {
	return &MockCreateRefundUseCase_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, input
func (_m *MockCreateRefundUseCase) Handle(ctx context.Context, input usecase.CreateRefundInput) (usecase.CreateRefundOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 usecase.CreateRefundOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.CreateRefundInput) (usecase.CreateRefundOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.CreateRefundInput) usecase.CreateRefundOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(usecase.CreateRefundOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.CreateRefundInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreateRefundUseCase_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockCreateRefundUseCase_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.CreateRefundInput
func (_e *MockCreateRefundUseCase_Expecter) Handle(ctx interface{}, input interface{}) *MockCreateRefundUseCase_Handle_Call {
	return &MockCreateRefundUseCase_Handle_Call{Call: _e.mock.On("Handle", ctx, input)}
}

func (_c *MockCreateRefundUseCase_Handle_Call) Run(run func(ctx context.Context, input usecase.CreateRefundInput)) *MockCreateRefundUseCase_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.CreateRefundInput))
	})
	return _c
}

func (_c *MockCreateRefundUseCase_Handle_Call) Return(_a0 usecase.CreateRefundOutput, _a1 error) *MockCreateRefundUseCase_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreateRefundUseCase_Handle_Call) RunAndReturn(run func(context.Context, usecase.CreateRefundInput) (usecase.CreateRefundOutput, error)) *MockCreateRefundUseCase_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreateRefundUseCase creates a new instance of MockCreateRefundUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreateRefundUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreateRefundUseCase {
	mock := &MockCreateRefundUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
