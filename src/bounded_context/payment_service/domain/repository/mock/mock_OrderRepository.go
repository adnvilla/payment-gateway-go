// Code generated by mockery v2.42.3. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"

	vo "github.com/adnvilla/payment-gateway-go/src/bounded_context/payment_service/domain/vo"
)

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

type MockOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepository) EXPECT() *MockOrderRepository_Expecter {
	return &MockOrderRepository_Expecter{mock: &_m.Mock}
}

// CaptureOrder provides a mock function with given fields: ctx, order
func (_m *MockOrderRepository) CaptureOrder(ctx context.Context, order vo.CaptureOrderDetail) (uuid.UUID, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CaptureOrder")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vo.CaptureOrderDetail) (uuid.UUID, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vo.CaptureOrderDetail) uuid.UUID); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vo.CaptureOrderDetail) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_CaptureOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CaptureOrder'
type MockOrderRepository_CaptureOrder_Call struct {
	*mock.Call
}

// CaptureOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order vo.CaptureOrderDetail
func (_e *MockOrderRepository_Expecter) CaptureOrder(ctx interface{}, order interface{}) *MockOrderRepository_CaptureOrder_Call {
	return &MockOrderRepository_CaptureOrder_Call{Call: _e.mock.On("CaptureOrder", ctx, order)}
}

func (_c *MockOrderRepository_CaptureOrder_Call) Run(run func(ctx context.Context, order vo.CaptureOrderDetail)) *MockOrderRepository_CaptureOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vo.CaptureOrderDetail))
	})
	return _c
}

func (_c *MockOrderRepository_CaptureOrder_Call) Return(_a0 uuid.UUID, _a1 error) *MockOrderRepository_CaptureOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_CaptureOrder_Call) RunAndReturn(run func(context.Context, vo.CaptureOrderDetail) (uuid.UUID, error)) *MockOrderRepository_CaptureOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *MockOrderRepository) CreateOrder(ctx context.Context, order vo.CreateOrderDetail) (uuid.UUID, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vo.CreateOrderDetail) (uuid.UUID, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vo.CreateOrderDetail) uuid.UUID); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vo.CreateOrderDetail) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockOrderRepository_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order vo.CreateOrderDetail
func (_e *MockOrderRepository_Expecter) CreateOrder(ctx interface{}, order interface{}) *MockOrderRepository_CreateOrder_Call {
	return &MockOrderRepository_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *MockOrderRepository_CreateOrder_Call) Run(run func(ctx context.Context, order vo.CreateOrderDetail)) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vo.CreateOrderDetail))
	})
	return _c
}

func (_c *MockOrderRepository_CreateOrder_Call) Return(_a0 uuid.UUID, _a1 error) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_CreateOrder_Call) RunAndReturn(run func(context.Context, vo.CreateOrderDetail) (uuid.UUID, error)) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefund provides a mock function with given fields: ctx, order
func (_m *MockOrderRepository) CreateRefund(ctx context.Context, order vo.CreateRefundDetail) (uuid.UUID, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefund")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vo.CreateRefundDetail) (uuid.UUID, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vo.CreateRefundDetail) uuid.UUID); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vo.CreateRefundDetail) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_CreateRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefund'
type MockOrderRepository_CreateRefund_Call struct {
	*mock.Call
}

// CreateRefund is a helper method to define mock.On call
//   - ctx context.Context
//   - order vo.CreateRefundDetail
func (_e *MockOrderRepository_Expecter) CreateRefund(ctx interface{}, order interface{}) *MockOrderRepository_CreateRefund_Call {
	return &MockOrderRepository_CreateRefund_Call{Call: _e.mock.On("CreateRefund", ctx, order)}
}

func (_c *MockOrderRepository_CreateRefund_Call) Run(run func(ctx context.Context, order vo.CreateRefundDetail)) *MockOrderRepository_CreateRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vo.CreateRefundDetail))
	})
	return _c
}

func (_c *MockOrderRepository_CreateRefund_Call) Return(_a0 uuid.UUID, _a1 error) *MockOrderRepository_CreateRefund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_CreateRefund_Call) RunAndReturn(run func(context.Context, vo.CreateRefundDetail) (uuid.UUID, error)) *MockOrderRepository_CreateRefund_Call {
	_c.Call.Return(run)
	return _c
}

// GetCaptureOrderProvider provides a mock function with given fields: ctx, orderId
func (_m *MockOrderRepository) GetCaptureOrderProvider(ctx context.Context, orderId uuid.UUID) (vo.CaptureOrderDetail, error) {
	ret := _m.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetCaptureOrderProvider")
	}

	var r0 vo.CaptureOrderDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (vo.CaptureOrderDetail, error)); ok {
		return rf(ctx, orderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) vo.CaptureOrderDetail); ok {
		r0 = rf(ctx, orderId)
	} else {
		r0 = ret.Get(0).(vo.CaptureOrderDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_GetCaptureOrderProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCaptureOrderProvider'
type MockOrderRepository_GetCaptureOrderProvider_Call struct {
	*mock.Call
}

// GetCaptureOrderProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId uuid.UUID
func (_e *MockOrderRepository_Expecter) GetCaptureOrderProvider(ctx interface{}, orderId interface{}) *MockOrderRepository_GetCaptureOrderProvider_Call {
	return &MockOrderRepository_GetCaptureOrderProvider_Call{Call: _e.mock.On("GetCaptureOrderProvider", ctx, orderId)}
}

func (_c *MockOrderRepository_GetCaptureOrderProvider_Call) Run(run func(ctx context.Context, orderId uuid.UUID)) *MockOrderRepository_GetCaptureOrderProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockOrderRepository_GetCaptureOrderProvider_Call) Return(_a0 vo.CaptureOrderDetail, _a1 error) *MockOrderRepository_GetCaptureOrderProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_GetCaptureOrderProvider_Call) RunAndReturn(run func(context.Context, uuid.UUID) (vo.CaptureOrderDetail, error)) *MockOrderRepository_GetCaptureOrderProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: ctx, orderId
func (_m *MockOrderRepository) GetOrder(ctx context.Context, orderId uuid.UUID) (vo.CreateOrder, error) {
	ret := _m.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 vo.CreateOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (vo.CreateOrder, error)); ok {
		return rf(ctx, orderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) vo.CreateOrder); ok {
		r0 = rf(ctx, orderId)
	} else {
		r0 = ret.Get(0).(vo.CreateOrder)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockOrderRepository_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId uuid.UUID
func (_e *MockOrderRepository_Expecter) GetOrder(ctx interface{}, orderId interface{}) *MockOrderRepository_GetOrder_Call {
	return &MockOrderRepository_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, orderId)}
}

func (_c *MockOrderRepository_GetOrder_Call) Run(run func(ctx context.Context, orderId uuid.UUID)) *MockOrderRepository_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockOrderRepository_GetOrder_Call) Return(_a0 vo.CreateOrder, _a1 error) *MockOrderRepository_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_GetOrder_Call) RunAndReturn(run func(context.Context, uuid.UUID) (vo.CreateOrder, error)) *MockOrderRepository_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderProvider provides a mock function with given fields: ctx, orderId
func (_m *MockOrderRepository) GetOrderProvider(ctx context.Context, orderId uuid.UUID) (vo.CreateOrderDetail, error) {
	ret := _m.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderProvider")
	}

	var r0 vo.CreateOrderDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (vo.CreateOrderDetail, error)); ok {
		return rf(ctx, orderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) vo.CreateOrderDetail); ok {
		r0 = rf(ctx, orderId)
	} else {
		r0 = ret.Get(0).(vo.CreateOrderDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepository_GetOrderProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderProvider'
type MockOrderRepository_GetOrderProvider_Call struct {
	*mock.Call
}

// GetOrderProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId uuid.UUID
func (_e *MockOrderRepository_Expecter) GetOrderProvider(ctx interface{}, orderId interface{}) *MockOrderRepository_GetOrderProvider_Call {
	return &MockOrderRepository_GetOrderProvider_Call{Call: _e.mock.On("GetOrderProvider", ctx, orderId)}
}

func (_c *MockOrderRepository_GetOrderProvider_Call) Run(run func(ctx context.Context, orderId uuid.UUID)) *MockOrderRepository_GetOrderProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockOrderRepository_GetOrderProvider_Call) Return(_a0 vo.CreateOrderDetail, _a1 error) *MockOrderRepository_GetOrderProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepository_GetOrderProvider_Call) RunAndReturn(run func(context.Context, uuid.UUID) (vo.CreateOrderDetail, error)) *MockOrderRepository_GetOrderProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
