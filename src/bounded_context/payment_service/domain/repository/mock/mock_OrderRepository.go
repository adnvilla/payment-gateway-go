// Code generated by mockery v2.42.2. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/adnvilla/payment-gateway-go/src/bounded_context/payment_service/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

type MockOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepository) EXPECT() *MockOrderRepository_Expecter {
	return &MockOrderRepository_Expecter{mock: &_m.Mock}
}

// CaptureOrder provides a mock function with given fields: ctx, order
func (_m *MockOrderRepository) CaptureOrder(ctx context.Context, order entity.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CaptureOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderRepository_CaptureOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CaptureOrder'
type MockOrderRepository_CaptureOrder_Call struct {
	*mock.Call
}

// CaptureOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order entity.Order
func (_e *MockOrderRepository_Expecter) CaptureOrder(ctx interface{}, order interface{}) *MockOrderRepository_CaptureOrder_Call {
	return &MockOrderRepository_CaptureOrder_Call{Call: _e.mock.On("CaptureOrder", ctx, order)}
}

func (_c *MockOrderRepository_CaptureOrder_Call) Run(run func(ctx context.Context, order entity.Order)) *MockOrderRepository_CaptureOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Order))
	})
	return _c
}

func (_c *MockOrderRepository_CaptureOrder_Call) Return(_a0 error) *MockOrderRepository_CaptureOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderRepository_CaptureOrder_Call) RunAndReturn(run func(context.Context, entity.Order) error) *MockOrderRepository_CaptureOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *MockOrderRepository) CreateOrder(ctx context.Context, order entity.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderRepository_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockOrderRepository_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order entity.Order
func (_e *MockOrderRepository_Expecter) CreateOrder(ctx interface{}, order interface{}) *MockOrderRepository_CreateOrder_Call {
	return &MockOrderRepository_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *MockOrderRepository_CreateOrder_Call) Run(run func(ctx context.Context, order entity.Order)) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Order))
	})
	return _c
}

func (_c *MockOrderRepository_CreateOrder_Call) Return(_a0 error) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderRepository_CreateOrder_Call) RunAndReturn(run func(context.Context, entity.Order) error) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
