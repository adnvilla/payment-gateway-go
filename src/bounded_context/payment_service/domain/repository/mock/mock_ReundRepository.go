// Code generated by mockery v2.42.3. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/adnvilla/payment-gateway-go/src/bounded_context/payment_service/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockReundRepository is an autogenerated mock type for the ReundRepository type
type MockReundRepository struct {
	mock.Mock
}

type MockReundRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReundRepository) EXPECT() *MockReundRepository_Expecter {
	return &MockReundRepository_Expecter{mock: &_m.Mock}
}

// CreateRefund provides a mock function with given fields: ctx, refund
func (_m *MockReundRepository) CreateRefund(ctx context.Context, refund entity.Refund) error {
	ret := _m.Called(ctx, refund)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefund")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Refund) error); ok {
		r0 = rf(ctx, refund)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReundRepository_CreateRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefund'
type MockReundRepository_CreateRefund_Call struct {
	*mock.Call
}

// CreateRefund is a helper method to define mock.On call
//   - ctx context.Context
//   - refund entity.Refund
func (_e *MockReundRepository_Expecter) CreateRefund(ctx interface{}, refund interface{}) *MockReundRepository_CreateRefund_Call {
	return &MockReundRepository_CreateRefund_Call{Call: _e.mock.On("CreateRefund", ctx, refund)}
}

func (_c *MockReundRepository_CreateRefund_Call) Run(run func(ctx context.Context, refund entity.Refund)) *MockReundRepository_CreateRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Refund))
	})
	return _c
}

func (_c *MockReundRepository_CreateRefund_Call) Return(_a0 error) *MockReundRepository_CreateRefund_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReundRepository_CreateRefund_Call) RunAndReturn(run func(context.Context, entity.Refund) error) *MockReundRepository_CreateRefund_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefund provides a mock function with given fields: ctx, refund
func (_m *MockReundRepository) GetRefund(ctx context.Context, refund entity.Refund) error {
	ret := _m.Called(ctx, refund)

	if len(ret) == 0 {
		panic("no return value specified for GetRefund")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Refund) error); ok {
		r0 = rf(ctx, refund)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReundRepository_GetRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefund'
type MockReundRepository_GetRefund_Call struct {
	*mock.Call
}

// GetRefund is a helper method to define mock.On call
//   - ctx context.Context
//   - refund entity.Refund
func (_e *MockReundRepository_Expecter) GetRefund(ctx interface{}, refund interface{}) *MockReundRepository_GetRefund_Call {
	return &MockReundRepository_GetRefund_Call{Call: _e.mock.On("GetRefund", ctx, refund)}
}

func (_c *MockReundRepository_GetRefund_Call) Run(run func(ctx context.Context, refund entity.Refund)) *MockReundRepository_GetRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Refund))
	})
	return _c
}

func (_c *MockReundRepository_GetRefund_Call) Return(_a0 error) *MockReundRepository_GetRefund_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReundRepository_GetRefund_Call) RunAndReturn(run func(context.Context, entity.Refund) error) *MockReundRepository_GetRefund_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReundRepository creates a new instance of MockReundRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReundRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReundRepository {
	mock := &MockReundRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
