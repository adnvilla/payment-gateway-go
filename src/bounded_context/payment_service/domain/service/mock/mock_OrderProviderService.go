// Code generated by mockery v2.42.3. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	vo "github.com/adnvilla/payment-gateway-go/src/bounded_context/payment_service/domain/vo"
)

// MockOrderProviderService is an autogenerated mock type for the OrderProviderService type
type MockOrderProviderService struct {
	mock.Mock
}

type MockOrderProviderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderProviderService) EXPECT() *MockOrderProviderService_Expecter {
	return &MockOrderProviderService_Expecter{mock: &_m.Mock}
}

// CaptureOrder provides a mock function with given fields: ctx, capture
func (_m *MockOrderProviderService) CaptureOrder(ctx context.Context, capture vo.CaptureOrder) (vo.CaptureOrderDetail, error) {
	ret := _m.Called(ctx, capture)

	if len(ret) == 0 {
		panic("no return value specified for CaptureOrder")
	}

	var r0 vo.CaptureOrderDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vo.CaptureOrder) (vo.CaptureOrderDetail, error)); ok {
		return rf(ctx, capture)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vo.CaptureOrder) vo.CaptureOrderDetail); ok {
		r0 = rf(ctx, capture)
	} else {
		r0 = ret.Get(0).(vo.CaptureOrderDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, vo.CaptureOrder) error); ok {
		r1 = rf(ctx, capture)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderProviderService_CaptureOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CaptureOrder'
type MockOrderProviderService_CaptureOrder_Call struct {
	*mock.Call
}

// CaptureOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - capture vo.CaptureOrder
func (_e *MockOrderProviderService_Expecter) CaptureOrder(ctx interface{}, capture interface{}) *MockOrderProviderService_CaptureOrder_Call {
	return &MockOrderProviderService_CaptureOrder_Call{Call: _e.mock.On("CaptureOrder", ctx, capture)}
}

func (_c *MockOrderProviderService_CaptureOrder_Call) Run(run func(ctx context.Context, capture vo.CaptureOrder)) *MockOrderProviderService_CaptureOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vo.CaptureOrder))
	})
	return _c
}

func (_c *MockOrderProviderService_CaptureOrder_Call) Return(_a0 vo.CaptureOrderDetail, _a1 error) *MockOrderProviderService_CaptureOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderProviderService_CaptureOrder_Call) RunAndReturn(run func(context.Context, vo.CaptureOrder) (vo.CaptureOrderDetail, error)) *MockOrderProviderService_CaptureOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *MockOrderProviderService) CreateOrder(ctx context.Context, order vo.CreateOrder) (vo.CreateOrderDetail, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 vo.CreateOrderDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vo.CreateOrder) (vo.CreateOrderDetail, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vo.CreateOrder) vo.CreateOrderDetail); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(vo.CreateOrderDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, vo.CreateOrder) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderProviderService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockOrderProviderService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order vo.CreateOrder
func (_e *MockOrderProviderService_Expecter) CreateOrder(ctx interface{}, order interface{}) *MockOrderProviderService_CreateOrder_Call {
	return &MockOrderProviderService_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *MockOrderProviderService_CreateOrder_Call) Run(run func(ctx context.Context, order vo.CreateOrder)) *MockOrderProviderService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vo.CreateOrder))
	})
	return _c
}

func (_c *MockOrderProviderService_CreateOrder_Call) Return(_a0 vo.CreateOrderDetail, _a1 error) *MockOrderProviderService_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderProviderService_CreateOrder_Call) RunAndReturn(run func(context.Context, vo.CreateOrder) (vo.CreateOrderDetail, error)) *MockOrderProviderService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefund provides a mock function with given fields: ctx, refund
func (_m *MockOrderProviderService) CreateRefund(ctx context.Context, refund vo.CreateRefundOrder) (vo.CreateRefundDetail, error) {
	ret := _m.Called(ctx, refund)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefund")
	}

	var r0 vo.CreateRefundDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vo.CreateRefundOrder) (vo.CreateRefundDetail, error)); ok {
		return rf(ctx, refund)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vo.CreateRefundOrder) vo.CreateRefundDetail); ok {
		r0 = rf(ctx, refund)
	} else {
		r0 = ret.Get(0).(vo.CreateRefundDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, vo.CreateRefundOrder) error); ok {
		r1 = rf(ctx, refund)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderProviderService_CreateRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefund'
type MockOrderProviderService_CreateRefund_Call struct {
	*mock.Call
}

// CreateRefund is a helper method to define mock.On call
//   - ctx context.Context
//   - refund vo.CreateRefundOrder
func (_e *MockOrderProviderService_Expecter) CreateRefund(ctx interface{}, refund interface{}) *MockOrderProviderService_CreateRefund_Call {
	return &MockOrderProviderService_CreateRefund_Call{Call: _e.mock.On("CreateRefund", ctx, refund)}
}

func (_c *MockOrderProviderService_CreateRefund_Call) Run(run func(ctx context.Context, refund vo.CreateRefundOrder)) *MockOrderProviderService_CreateRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(vo.CreateRefundOrder))
	})
	return _c
}

func (_c *MockOrderProviderService_CreateRefund_Call) Return(_a0 vo.CreateRefundDetail, _a1 error) *MockOrderProviderService_CreateRefund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderProviderService_CreateRefund_Call) RunAndReturn(run func(context.Context, vo.CreateRefundOrder) (vo.CreateRefundDetail, error)) *MockOrderProviderService_CreateRefund_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderProviderService creates a new instance of MockOrderProviderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderProviderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderProviderService {
	mock := &MockOrderProviderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
