// Code generated by mockery v2.42.3. DO NOT EDIT.

package mock

import (
	context "context"

	service "github.com/adnvilla/payment-gateway-go/src/bounded_context/payment_service/domain/service"
	shared_domain "github.com/adnvilla/payment-gateway-go/src/pkg/shared_domain"
	mock "github.com/stretchr/testify/mock"
)

// MockGetProviderService is an autogenerated mock type for the GetProviderService type
type MockGetProviderService struct {
	mock.Mock
}

type MockGetProviderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetProviderService) EXPECT() *MockGetProviderService_Expecter {
	return &MockGetProviderService_Expecter{mock: &_m.Mock}
}

// GetProviderClient provides a mock function with given fields: ctx, provider
func (_m *MockGetProviderService) GetProviderClient(ctx context.Context, provider shared_domain.ProviderType) (service.OrderProviderService, error) {
	ret := _m.Called(ctx, provider)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderClient")
	}

	var r0 service.OrderProviderService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, shared_domain.ProviderType) (service.OrderProviderService, error)); ok {
		return rf(ctx, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, shared_domain.ProviderType) service.OrderProviderService); ok {
		r0 = rf(ctx, provider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.OrderProviderService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, shared_domain.ProviderType) error); ok {
		r1 = rf(ctx, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetProviderService_GetProviderClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderClient'
type MockGetProviderService_GetProviderClient_Call struct {
	*mock.Call
}

// GetProviderClient is a helper method to define mock.On call
//   - ctx context.Context
//   - provider shared_domain.ProviderType
func (_e *MockGetProviderService_Expecter) GetProviderClient(ctx interface{}, provider interface{}) *MockGetProviderService_GetProviderClient_Call {
	return &MockGetProviderService_GetProviderClient_Call{Call: _e.mock.On("GetProviderClient", ctx, provider)}
}

func (_c *MockGetProviderService_GetProviderClient_Call) Run(run func(ctx context.Context, provider shared_domain.ProviderType)) *MockGetProviderService_GetProviderClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(shared_domain.ProviderType))
	})
	return _c
}

func (_c *MockGetProviderService_GetProviderClient_Call) Return(_a0 service.OrderProviderService, _a1 error) *MockGetProviderService_GetProviderClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetProviderService_GetProviderClient_Call) RunAndReturn(run func(context.Context, shared_domain.ProviderType) (service.OrderProviderService, error)) *MockGetProviderService_GetProviderClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetProviderService creates a new instance of MockGetProviderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetProviderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetProviderService {
	mock := &MockGetProviderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
