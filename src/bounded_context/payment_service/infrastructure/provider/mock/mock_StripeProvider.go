// Code generated by mockery v2.42.3. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	stripe "github.com/stripe/stripe-go/v78"
)

// MockStripeProvider is an autogenerated mock type for the StripeProvider type
type MockStripeProvider struct {
	mock.Mock
}

type MockStripeProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStripeProvider) EXPECT() *MockStripeProvider_Expecter {
	return &MockStripeProvider_Expecter{mock: &_m.Mock}
}

// Capture provides a mock function with given fields: id, params
func (_m *MockStripeProvider) Capture(id string, params *stripe.PaymentIntentCaptureParams) (*stripe.PaymentIntent, error) {
	ret := _m.Called(id, params)

	if len(ret) == 0 {
		panic("no return value specified for Capture")
	}

	var r0 *stripe.PaymentIntent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *stripe.PaymentIntentCaptureParams) (*stripe.PaymentIntent, error)); ok {
		return rf(id, params)
	}
	if rf, ok := ret.Get(0).(func(string, *stripe.PaymentIntentCaptureParams) *stripe.PaymentIntent); ok {
		r0 = rf(id, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.PaymentIntent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *stripe.PaymentIntentCaptureParams) error); ok {
		r1 = rf(id, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStripeProvider_Capture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Capture'
type MockStripeProvider_Capture_Call struct {
	*mock.Call
}

// Capture is a helper method to define mock.On call
//   - id string
//   - params *stripe.PaymentIntentCaptureParams
func (_e *MockStripeProvider_Expecter) Capture(id interface{}, params interface{}) *MockStripeProvider_Capture_Call {
	return &MockStripeProvider_Capture_Call{Call: _e.mock.On("Capture", id, params)}
}

func (_c *MockStripeProvider_Capture_Call) Run(run func(id string, params *stripe.PaymentIntentCaptureParams)) *MockStripeProvider_Capture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*stripe.PaymentIntentCaptureParams))
	})
	return _c
}

func (_c *MockStripeProvider_Capture_Call) Return(_a0 *stripe.PaymentIntent, _a1 error) *MockStripeProvider_Capture_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStripeProvider_Capture_Call) RunAndReturn(run func(string, *stripe.PaymentIntentCaptureParams) (*stripe.PaymentIntent, error)) *MockStripeProvider_Capture_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentIntent provides a mock function with given fields: params
func (_m *MockStripeProvider) NewPaymentIntent(params *stripe.PaymentIntentParams) (*stripe.PaymentIntent, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for NewPaymentIntent")
	}

	var r0 *stripe.PaymentIntent
	var r1 error
	if rf, ok := ret.Get(0).(func(*stripe.PaymentIntentParams) (*stripe.PaymentIntent, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*stripe.PaymentIntentParams) *stripe.PaymentIntent); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.PaymentIntent)
		}
	}

	if rf, ok := ret.Get(1).(func(*stripe.PaymentIntentParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStripeProvider_NewPaymentIntent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewPaymentIntent'
type MockStripeProvider_NewPaymentIntent_Call struct {
	*mock.Call
}

// NewPaymentIntent is a helper method to define mock.On call
//   - params *stripe.PaymentIntentParams
func (_e *MockStripeProvider_Expecter) NewPaymentIntent(params interface{}) *MockStripeProvider_NewPaymentIntent_Call {
	return &MockStripeProvider_NewPaymentIntent_Call{Call: _e.mock.On("NewPaymentIntent", params)}
}

func (_c *MockStripeProvider_NewPaymentIntent_Call) Run(run func(params *stripe.PaymentIntentParams)) *MockStripeProvider_NewPaymentIntent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*stripe.PaymentIntentParams))
	})
	return _c
}

func (_c *MockStripeProvider_NewPaymentIntent_Call) Return(_a0 *stripe.PaymentIntent, _a1 error) *MockStripeProvider_NewPaymentIntent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStripeProvider_NewPaymentIntent_Call) RunAndReturn(run func(*stripe.PaymentIntentParams) (*stripe.PaymentIntent, error)) *MockStripeProvider_NewPaymentIntent_Call {
	_c.Call.Return(run)
	return _c
}

// NewRefund provides a mock function with given fields: params
func (_m *MockStripeProvider) NewRefund(params *stripe.RefundParams) (*stripe.Refund, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for NewRefund")
	}

	var r0 *stripe.Refund
	var r1 error
	if rf, ok := ret.Get(0).(func(*stripe.RefundParams) (*stripe.Refund, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*stripe.RefundParams) *stripe.Refund); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Refund)
		}
	}

	if rf, ok := ret.Get(1).(func(*stripe.RefundParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStripeProvider_NewRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRefund'
type MockStripeProvider_NewRefund_Call struct {
	*mock.Call
}

// NewRefund is a helper method to define mock.On call
//   - params *stripe.RefundParams
func (_e *MockStripeProvider_Expecter) NewRefund(params interface{}) *MockStripeProvider_NewRefund_Call {
	return &MockStripeProvider_NewRefund_Call{Call: _e.mock.On("NewRefund", params)}
}

func (_c *MockStripeProvider_NewRefund_Call) Run(run func(params *stripe.RefundParams)) *MockStripeProvider_NewRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*stripe.RefundParams))
	})
	return _c
}

func (_c *MockStripeProvider_NewRefund_Call) Return(_a0 *stripe.Refund, _a1 error) *MockStripeProvider_NewRefund_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStripeProvider_NewRefund_Call) RunAndReturn(run func(*stripe.RefundParams) (*stripe.Refund, error)) *MockStripeProvider_NewRefund_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStripeProvider creates a new instance of MockStripeProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStripeProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStripeProvider {
	mock := &MockStripeProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
